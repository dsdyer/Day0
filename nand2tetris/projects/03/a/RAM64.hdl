// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux8Way(in=load, sel=address[3..5], a=internalload1, 
                                         b=internalload2, 
                                         c=internalload3, 
                                         d=internalload4, 
                                         e=internalload5, 
                                         f=internalload6, 
                                         g=internalload7, 
                                         h=internalload8);

    RAM8(in=in, load=internalload1, address=address[0..2], out=internalout1);
    RAM8(in=in, load=internalload2, address=address[0..2], out=internalout2);
    RAM8(in=in, load=internalload3, address=address[0..2], out=internalout3);
    RAM8(in=in, load=internalload4, address=address[0..2], out=internalout4);
    RAM8(in=in, load=internalload5, address=address[0..2], out=internalout5);
    RAM8(in=in, load=internalload6, address=address[0..2], out=internalout6);
    RAM8(in=in, load=internalload7, address=address[0..2], out=internalout7);
    RAM8(in=in, load=internalload8, address=address[0..2], out=internalout8);


    Mux8Way16(a=internalout1,
              b=internalout2,
              c=internalout3,
              d=internalout4,
              e=internalout5,
              f=internalout6,
              g=internalout7,
              h=internalout8, sel=address[3..5], out=out);
}
